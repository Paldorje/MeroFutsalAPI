// <auto-generated />
using System;
using MeroFutsal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeroFutsal.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MeroFutsal.Models.Booking", b =>
                {
                    b.Property<int>("Bookingid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Groundid")
                        .HasColumnType("int");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Userid")
                        .HasColumnType("int");

                    b.HasKey("Bookingid");

                    b.HasIndex("Groundid");

                    b.HasIndex("Userid");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("MeroFutsal.Models.Futsal", b =>
                {
                    b.Property<int>("Futsalid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("FutsalName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Groundid")
                        .HasColumnType("int");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Isreserved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Ownerid")
                        .HasColumnType("int");

                    b.HasKey("Futsalid");

                    b.HasIndex("Groundid");

                    b.ToTable("Futsals");
                });

            modelBuilder.Entity("MeroFutsal.Models.Ground", b =>
                {
                    b.Property<int>("Groundid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Futsalid")
                        .HasColumnType("int");

                    b.Property<string>("GroundName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Isreserved")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Groundid");

                    b.ToTable("Grounds");
                });

            modelBuilder.Entity("MeroFutsal.Models.Owner", b =>
                {
                    b.Property<int>("Ownerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Ownerid");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("MeroFutsal.Models.Photo", b =>
                {
                    b.Property<int>("Photoid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Futsalid")
                        .HasColumnType("int");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Photoid");

                    b.HasIndex("Futsalid");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("MeroFutsal.User", b =>
                {
                    b.Property<int>("userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Photo")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("userid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MeroFutsal.Models.Booking", b =>
                {
                    b.HasOne("MeroFutsal.Models.Ground", "Ground")
                        .WithMany("Bookings")
                        .HasForeignKey("Groundid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeroFutsal.User", "User")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ground");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeroFutsal.Models.Futsal", b =>
                {
                    b.HasOne("MeroFutsal.Models.Ground", null)
                        .WithMany("Futsals")
                        .HasForeignKey("Groundid");
                });

            modelBuilder.Entity("MeroFutsal.Models.Photo", b =>
                {
                    b.HasOne("MeroFutsal.Models.Futsal", "Futsal")
                        .WithMany()
                        .HasForeignKey("Futsalid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Futsal");
                });

            modelBuilder.Entity("MeroFutsal.Models.Ground", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Futsals");
                });
#pragma warning restore 612, 618
        }
    }
}
