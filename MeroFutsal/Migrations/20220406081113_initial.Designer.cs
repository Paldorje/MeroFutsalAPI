// <auto-generated />
using System;
using MeroFutsal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeroFutsal.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220406081113_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MeroFutsal.Models.Booking", b =>
                {
                    b.Property<int>("Bookingid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Groundid")
                        .HasColumnType("int");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Bookingid");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("MeroFutsal.Models.Futsal", b =>
                {
                    b.Property<int>("Futsalid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("FutsalName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Isreserved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OwnerEmail")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Futsalid");

                    b.HasIndex("OwnerEmail")
                        .IsUnique();

                    b.ToTable("Futsals");
                });

            modelBuilder.Entity("MeroFutsal.Models.Ground", b =>
                {
                    b.Property<int>("Groundid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Futsalid")
                        .HasColumnType("int");

                    b.Property<string>("GroundName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Isreserved")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Groundid");

                    b.HasIndex("Futsalid");

                    b.ToTable("Grounds");
                });

            modelBuilder.Entity("MeroFutsal.Models.GroundBooking", b =>
                {
                    b.Property<int>("GroundId")
                        .HasColumnType("int");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.HasKey("GroundId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("GroundBooking");
                });

            modelBuilder.Entity("MeroFutsal.Models.Owner", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Email");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("MeroFutsal.Models.Photo", b =>
                {
                    b.Property<int>("Photoid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Futsalid")
                        .HasColumnType("int");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Photoid");

                    b.HasIndex("Futsalid");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("MeroFutsal.Models.UserBooking", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.HasKey("UserEmail", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("UserBooking");
                });

            modelBuilder.Entity("MeroFutsal.User", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Photo")
                        .HasColumnType("longtext");

                    b.HasKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MeroFutsal.Models.Futsal", b =>
                {
                    b.HasOne("MeroFutsal.Models.Owner", "Owners")
                        .WithOne("Futsals")
                        .HasForeignKey("MeroFutsal.Models.Futsal", "OwnerEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owners");
                });

            modelBuilder.Entity("MeroFutsal.Models.Ground", b =>
                {
                    b.HasOne("MeroFutsal.Models.Futsal", "Futsals")
                        .WithMany("Grounds")
                        .HasForeignKey("Futsalid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Futsals");
                });

            modelBuilder.Entity("MeroFutsal.Models.GroundBooking", b =>
                {
                    b.HasOne("MeroFutsal.Models.Booking", "Booking")
                        .WithMany("GroundBookings")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeroFutsal.Models.Ground", "Ground")
                        .WithMany("GroundBookings")
                        .HasForeignKey("GroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Ground");
                });

            modelBuilder.Entity("MeroFutsal.Models.Photo", b =>
                {
                    b.HasOne("MeroFutsal.Models.Futsal", "Futsal")
                        .WithMany()
                        .HasForeignKey("Futsalid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Futsal");
                });

            modelBuilder.Entity("MeroFutsal.Models.UserBooking", b =>
                {
                    b.HasOne("MeroFutsal.Models.Booking", "Booking")
                        .WithMany("UserBookings")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeroFutsal.User", "User")
                        .WithMany("UserBookings")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeroFutsal.Models.Booking", b =>
                {
                    b.Navigation("GroundBookings");

                    b.Navigation("UserBookings");
                });

            modelBuilder.Entity("MeroFutsal.Models.Futsal", b =>
                {
                    b.Navigation("Grounds");
                });

            modelBuilder.Entity("MeroFutsal.Models.Ground", b =>
                {
                    b.Navigation("GroundBookings");
                });

            modelBuilder.Entity("MeroFutsal.Models.Owner", b =>
                {
                    b.Navigation("Futsals")
                        .IsRequired();
                });

            modelBuilder.Entity("MeroFutsal.User", b =>
                {
                    b.Navigation("UserBookings");
                });
#pragma warning restore 612, 618
        }
    }
}
